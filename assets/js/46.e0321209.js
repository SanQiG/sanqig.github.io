(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{401:function(v,_,e){"use strict";e.r(_);var t=e(44),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"跨域-cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域-cors"}},[v._v("#")]),v._v(" 跨域（CORS）")]),v._v(" "),e("h2",{attrs:{id:"跨域概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域概述"}},[v._v("#")]),v._v(" 跨域概述")]),v._v(" "),e("p",[v._v("当一个资源从与该资源本身所在的服务器不同的 "),e("strong",[e("code",[v._v("域、协议、端口")])]),v._v(" 请求一个资源时，资源会发起一个跨域 HTTP 请求。出于安全原因，浏览器限制从脚本内发起的跨源 HTTP 请求，XMLHttpRequest 和 Fetch API，只能从加载应用程序的一个域请求 HTTP 资源，除非使用"),e("code",[v._v("CORS头文件")]),v._v("。")]),v._v(" "),e("p",[e("strong",[e("code",[v._v("浏览器限制")])]),v._v("：不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但返回结果被浏览器拦截。")]),v._v(" "),e("h2",{attrs:{id:"cors-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors-概述"}},[v._v("#")]),v._v(" CORS 概述")]),v._v(" "),e("p",[v._v("跨域资源共享标准新增了一组 HTTP 首部字段，"),e("strong",[v._v("允许服务器声明哪些源站通过浏览器有权限访问哪些资源")]),v._v("。")]),v._v(" "),e("p",[v._v("另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），"),e("strong",[v._v("浏览器必须首先使用 OPTIONS 方法发起一个"),e("code",[v._v("预检请求")]),v._v("（preflight request），从而获知服务器是否允许该跨域请求。")])]),v._v(" "),e("p",[e("strong",[v._v("服务器确认允许之后，才发起实际的HTTP请求")]),v._v("。 在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 cookie 和 HTTP 认证相关数据）。")]),v._v(" "),e("p",[v._v("话不多说，直接上图。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/25027560/50205846-accac300-03a4-11e9-8654-2d646d237820.png",alt:""}})]),v._v(" "),e("h3",{attrs:{id:"简单请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[v._v("#")]),v._v(" 简单请求")]),v._v(" "),e("p",[v._v("不会触发 CORS 预检的请求称为简单请求，满足以下"),e("strong",[v._v("所有条件")]),v._v("的才会被视为简单请求，基本上日常开发只会关注前面两点。")]),v._v(" "),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("GET")]),v._v("、"),e("code",[v._v("POST")]),v._v("、"),e("code",[v._v("HEAD")]),v._v(" 其中一种方法")]),v._v(" "),e("li",[v._v("只使用了如下的安全首部字段，不得人为设置其他首部字段\n"),e("ul",[e("li",[e("code",[v._v("Accept")])]),v._v(" "),e("li",[e("code",[v._v("Accept-Language")])]),v._v(" "),e("li",[e("code",[v._v("Content-Language")])]),v._v(" "),e("li",[e("code",[v._v("Content-Type")]),v._v(" 仅限以下三种\n"),e("ul",[e("li",[e("code",[v._v("text/plain")])]),v._v(" "),e("li",[e("code",[v._v("multipart/form-data")])]),v._v(" "),e("li",[e("code",[v._v("application/x-www-form-urlencoded")])])])]),v._v(" "),e("li",[v._v("HTML 头部 header filed 字段："),e("code",[v._v("DPR")]),v._v("、"),e("code",[v._v("Download")]),v._v("、"),e("code",[v._v("Save-Data")]),v._v("、"),e("code",[v._v("Viewport-Width")]),v._v("、"),e("code",[v._v("Width")])])])]),v._v(" "),e("li",[v._v("请求中的任意 "),e("code",[v._v("XMLHttpRequestUpload")]),v._v(" 对象均没有注册任何事件监听器；"),e("code",[v._v("XMLHttpRequestUpload")]),v._v("对象可以使用 "),e("code",[v._v("XMLHttpRequest.upload")]),v._v(" 属性访问")]),v._v(" "),e("li",[v._v("请求中没有使用 "),e("code",[v._v("ReadableStream")]),v._v(" 对象")])]),v._v(" "),e("h3",{attrs:{id:"预检请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[v._v("#")]),v._v(" 预检请求")]),v._v(" "),e("p",[v._v("需预检的请求要求必须使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"),e("code",[v._v("预检请求")]),v._v(" 的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。")]),v._v(" "),e("p",[v._v("下面的请求会触发预检请求，其实"),e("strong",[v._v("非简单请求之外的都会触发预检")])]),v._v(" "),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("PUT")]),v._v("、"),e("code",[v._v("DELETE")]),v._v("、"),e("code",[v._v("CONNECT")]),v._v("、"),e("code",[v._v("OPTIONS")]),v._v("、"),e("code",[v._v("TRACE")]),v._v("、"),e("code",[v._v("PATCH")]),v._v(" 方法")]),v._v(" "),e("li",[v._v("人为设置了非规定内的其他首部字段，参考上面简单请求的安全字段集合，还要特别注意 "),e("code",[v._v("Content-Type")]),v._v(" 的类型")]),v._v(" "),e("li",[e("code",[v._v("XMLHttpRequestUpload")]),v._v(" 对象注册了任何事件监听器")]),v._v(" "),e("li",[v._v("请求中使用了 "),e("code",[v._v("ReadableStream")]),v._v(" 对象")])]),v._v(" "),e("h3",{attrs:{id:"请求附带身份凭证-cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求附带身份凭证-cookie"}},[v._v("#")]),v._v(" 请求附带身份凭证 => cookie")]),v._v(" "),e("p",[v._v("如果发起请求时设置 "),e("code",[v._v("WithCredentials")]),v._v(" 标志设置为 "),e("code",[v._v("true")]),v._v("，从而向服务器发送 "),e("code",[v._v("cookie")]),v._v("，但是如果服务器的响应中未携带 "),e("code",[v._v("Access-Control-Allow-Credentials: true")]),v._v("，浏览器将不会把响应内容返回给请求的发送者。")]),v._v(" "),e("p",[v._v("对于附带身份凭证的请求，服务器不得设置 "),e("code",[v._v("Access-Control-Allow-Origin")]),v._v(" 的值为"),e("code",[v._v("*")]),v._v("，必须是某个具体的域名。")]),v._v(" "),e("p",[v._v("注意，简单 GET 请求不会被预检；如果此类带有身份凭证请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。")]),v._v(" "),e("h2",{attrs:{id:"完整请求流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完整请求流程"}},[v._v("#")]),v._v(" 完整请求流程")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://user-images.githubusercontent.com/25027560/50205881-c409b080-03a4-11e9-8a57-a2a6d0e1d879.png",alt:""}})])])}),[],!1,null,null,null);_.default=o.exports}}]);